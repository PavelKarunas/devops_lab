#!/usr/bin/python3

import psutil
import argparse
import time
import json

parser = argparse.ArgumentParser(description='Simple server system monitoring script.')
parser.add_argument('interval', type=int, nargs='?', const=1, default=300, help='Time interval.')
parser.add_argument('data_type', type=str, nargs='?', const=1, default='txt', help='Output file format txt or json.')
args = parser.parse_args()


class Metrics:
    """Metrics to gather from server"""
    def __init__(self):
        self.cpu = cpu_time()
        self.disk = disk_use()
        self.ram = ram_use()
        self.disk_io = disk_io()
        self.net_io = net_io()

    def write_to_txt(self):
        s = " CPU: " + str(self.cpu) + "%" + " MEMORY: " \
                + str(self.disk) + "% VIRTUAL_MEMORY: " + str(self.ram) \
                + "% IO_info: " + str(self.disk_io) + " NET_info: " + str(self.net_io) + '\n'
        return s


def cpu_time():
    return psutil.cpu_percent(interval=1, percpu=False)


def disk_use():
    return psutil.disk_usage('/').used


def ram_use():
    return psutil.virtual_memory().used


def disk_io():
    return psutil.disk_io_counters().write_time


def net_io():
    return psutil.net_io_counters().packets_sent


x = 0

if args.data_type == 'txt':

    while True:
        x += 1
        snap = Metrics()
        result_file = open('result.txt', 'a+')
        sha = "SNAPSHOT " + str(x) + ": " + "TIMESTAMP: " + str(time.ctime())
        rez = sha + snap.write_to_txt()
        result_file.write(rez)
        result_file.close()
        time.sleep(args.interval)

elif args.data_type == 'json':

    while True:
        x += 1
        snap = Metrics()

        s = {
            'SNAPSHOT': str(x), 'Time STAMP': str(time.ctime()),
            'CPU': snap.cpu,
            'MEM': snap.disk,
            'Virtual Memory': snap.ram,
            'I/O': snap.disk_io,
            'NET': snap.net_io
            }

        with open("result.json", "a+") as f:
            json.dump(s, f)
            f = open('result.json', 'a+')
            f.write('\n')
            f.close()

        time.sleep(args.interval)
